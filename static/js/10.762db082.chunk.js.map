{"version":3,"sources":["components/sections/FeedbackForm.js"],"names":["captchaToken","FeedbackForm","_useContext","useContext","GlobalContext","_useContext2","Object","_Applications_MAMP_htdocs_Ylight_Music_Client_master_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","_Applications_MAMP_htdocs_Ylight_Music_Client_master_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectDestructuringEmpty__WEBPACK_IMPORTED_MODULE_0__","dispatch","setSnackbarMsg","React","useCallback","data","type","snippet","_React$useState","useState","_React$useState2","isSending","setIsSending","formEl","useRef","useEffect","loadReCaptcha","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","component","ref","onSubmit","e","formData","FormData","current","name","get","email","message","preventDefault","post","captcha","axios","then","response","console","log","status","reset","catch","error","container","required","justify","style","width","maxWidth","margin","react_recaptcha_v3__WEBPACK_IMPORTED_MODULE_7__","sitekey","action","verifyCallback","token","document","querySelector","remove","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","id","label","autoComplete","variant","fullWidth","color","multiline","rows","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","transform","borderRadius","_material_ui_core__WEBPACK_IMPORTED_MODULE_6__","marginTop","disabled"],"mappings":"sGAaIA,uGA4IWC,UA3IM,WAAM,IAAAC,EACFC,qBAAWC,KADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAAI,OAAAE,EAAA,EAAAF,CAAAD,EAAA,QACdI,EADcJ,EAAA,GAGnBK,EAAiBC,IAAMC,YAC3B,SAAAC,GACEJ,EAAS,CAAEK,KAAM,iBAAkBC,QAASF,KAE9C,CAACJ,IAPsBO,EASSL,IAAMM,UAAS,GATxBC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GASlBG,EATkBD,EAAA,GASPE,EATOF,EAAA,GAUnBG,EAASV,IAAMW,OAAO,MAyC5BX,IAAMY,UAAU,WACdC,wBAAc,6CACb,IAUH,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAU,OACVC,IAAKT,EACLU,SAvDe,SAAAC,GAEjBZ,GAAa,GACb,IAAMa,EAAW,IAAIC,SAASb,EAAOc,SAC/BC,EAAOH,EAASI,IAAI,QACpBC,EAAQL,EAASI,IAAI,SACrBE,EAAUN,EAASI,IAAI,WAE7BL,EAAEQ,iBAEF,IAAMC,EAAO,CACXL,KAAMA,EACNE,MAAOA,EACPC,QAASA,EACTG,QAAS1C,GAGX2C,IACGF,KAAK,qCAAsCA,GAC3CG,KAAK,SAASC,GACbC,QAAQC,IAAIF,EAAShC,KAAKmC,QAE1B3B,EAAOc,QAAQc,QACfvC,EAAemC,EAAShC,KAAKmC,QAC7B5B,GAAa,KAEd8B,MAAM,SAASC,GAEVA,EAAMN,UACsB,MAA1BM,EAAMN,SAASG,SACjB3B,EAAOc,QAAQc,QAEfvC,EAAe,gCAGnBU,GAAa,MAqBfgC,WAAS,EACTC,UAAQ,EACRC,QAAQ,SACRC,MAAO,CAAEC,MAAO,MAAOC,SAAU,QAASC,OAAQ,WAElDjC,EAAAC,EAAAC,cAACgC,EAAA,UAAD,CACEC,QAAQ,2CACRC,OAAO,cACPC,eArBiB,SAAAC,GAErB/D,EAAe+D,EACIC,SAASC,cAAc,qBAC/BC,YAmBTzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,GAAG,uBACHC,MAAM,OACNvD,KAAK,OACLsB,KAAK,OACLkC,aAAa,OACbZ,OAAO,SACPa,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNpB,UAAQ,IAEV5B,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,GAAG,uBACHC,MAAM,QACNvD,KAAK,QACLsB,KAAK,QACLkC,aAAa,QACbZ,OAAO,SACPa,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNpB,UAAQ,IAEV5B,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEC,GAAG,uBACHC,MAAM,WACNK,WAAS,EACTC,KAAK,IACL7D,KAAK,OACLsB,KAAK,UACLkC,aAAa,WACbZ,OAAO,SACPa,QAAQ,WACRC,WAAS,EACTC,MAAM,UACNpB,UAAQ,IAETlC,EACCM,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACErB,MAAO,CACLC,MAAO,OACPqB,UAAW,oBACXC,aAAc,SAGhB,KACJrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CACExB,MAAO,CAAEyB,UAAW,QACpBT,QAAQ,WACRE,MAAM,UACN3D,KAAK,SACLmE,WAAU9D,GAGTA,EAAY,mBAAqB","file":"static/js/10.762db082.chunk.js","sourcesContent":["import React, {useContext, useCallback} from \"react\";\nimport {\n  FormControl,\n  TextField,\n  Button,\n  Grid,\n  CircularProgress,\n  LinearProgress\n} from \"@material-ui/core\";\nimport { loadReCaptcha, ReCaptcha } from \"react-recaptcha-v3\";\nimport axios from \"axios\";\nimport { GlobalContext } from \"../GlobalState\";\n\nlet captchaToken;\nconst FeedbackForm = () => {\n  const [{}, dispatch] = useContext(GlobalContext);\n\n  const setSnackbarMsg = React.useCallback(\n    data => {\n      dispatch({ type: \"setSnackbarMsg\", snippet: data });\n    },\n    [dispatch]\n  );\n  const [isSending, setIsSending] = React.useState(false);\n  const formEl = React.useRef(null);\n\n  const submitForm = e => {\n    // set state to sending\n    setIsSending(true);\n    const formData = new FormData(formEl.current);\n    const name = formData.get(\"name\");\n    const email = formData.get(\"email\");\n    const message = formData.get(\"message\");\n\n    e.preventDefault();\n\n    const post = {\n      name: name,\n      email: email,\n      message: message,\n      captcha: captchaToken\n    };\n\n    axios\n      .post(\"https://xmailerr.glitch.me/contact\", post)\n      .then(function(response) {\n        console.log(response.data.status);\n        // also clear the form\n        formEl.current.reset();\n        setSnackbarMsg(response.data.status);\n        setIsSending(false);\n      })\n      .catch(function(error) {\n        // console.log(error.response.status);\n        if (error.response) {\n          if (error.response.status === 429) {\n            formEl.current.reset();\n\n            setSnackbarMsg(\"We accept limited feedback!\");\n          }\n        }\n        setIsSending(false);\n      });\n  };\n\n  React.useEffect(() => {\n    loadReCaptcha(\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\");\n  }, []);\n\n  const verifyCallback = token => {\n    // console.log(token);\n    captchaToken = token;\n    const captchaBox = document.querySelector(\".grecaptcha-badge\");\n    captchaBox.remove();\n    // remove captcha badge\n  };\n\n  return (\n    <Grid\n      component=\"form\"\n      ref={formEl}\n      onSubmit={submitForm}\n      container\n      required\n      justify=\"center\"\n      style={{ width: \"90%\", maxWidth: \"500px\", margin: \"0 auto\" }}\n    >\n      <ReCaptcha\n        sitekey=\"6Le1toEUAAAAAITyNwqEMaz3hFAYzciSJDMomrgN\"\n        action=\"action_name\"\n        verifyCallback={verifyCallback}\n      />\n      <TextField\n        id=\"outlined-email-input\"\n        label=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        autoComplete=\"name\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        fullWidth\n        color=\"primary\"\n        required\n      />\n      <TextField\n        id=\"outlined-email-input\"\n        label=\"Email\"\n        type=\"email\"\n        name=\"email\"\n        autoComplete=\"email\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        fullWidth\n        color=\"primary\"\n        required\n      />\n      <TextField\n        id=\"outlined-email-input\"\n        label=\"Feedback\"\n        multiline\n        rows=\"4\"\n        type=\"text\"\n        name=\"message\"\n        autoComplete=\"feedback\"\n        margin=\"normal\"\n        variant=\"outlined\"\n        fullWidth\n        color=\"primary\"\n        required\n      />\n      {isSending ? (\n        <LinearProgress\n          style={{\n            width: \"100%\",\n            transform: \"translateY(-12px)\",\n            borderRadius: \"2px\"\n          }}\n        />\n      ) : null}\n      <Button\n        style={{ marginTop: \"10px\" }}\n        variant=\"outlined\"\n        color=\"primary\"\n        type=\"submit\"\n        disabled={isSending ? true : false}\n      >\n        {/* if sending is true then show circular progress */}\n        {isSending ? \"Sending Feedback\" : \"Send Feedback\"}\n      </Button>\n    </Grid>\n  );\n};\n\nexport default FeedbackForm;\n"],"sourceRoot":""}